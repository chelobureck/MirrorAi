"""
üñºÔ∏è Image Search Service
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Pexels API
–ê–≤—Ç–æ—Ä: SayDeck Team
"""

import asyncio
import logging
from typing import List, Dict, Optional, Any
from dataclasses import dataclass
import aiohttp
from config.settings import get_settings

settings = get_settings()
logger = logging.getLogger(__name__)

@dataclass
class ImageResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    id: int
    url: str
    original_url: str
    photographer: str
    photographer_url: str
    width: int
    height: int
    alt: str = ""
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON"""
        return {
            "id": self.id,
            "url": self.url,
            "original_url": self.original_url,
            "photographer": self.photographer,
            "photographer_url": self.photographer_url,
            "width": self.width,
            "height": self.height,
            "alt": self.alt
        }

class PexelsImageService:
    """
    üé® –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Pexels API
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ fallback
    - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞—Ç—Ä–∏–±—É—Ü–∏—è –∞–≤—Ç–æ—Ä–æ–≤
    """
    
    BASE_URL = "https://api.pexels.com/v1"
    
    def __init__(self, api_key: Optional[str] = None):
        self.api_key = api_key or settings.PEXELS_API_KEY
        self.session: Optional[aiohttp.ClientSession] = None
        self._cache: Dict[str, List[ImageResult]] = {}
        
        if not self.api_key or self.api_key == "your_pexels_api_key":
            logger.warning("‚ö†Ô∏è  Pexels API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏")
    
    async def _ensure_session(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        if not self.session or self.session.closed:
            headers = {
                "Authorization": self.api_key,
                "User-Agent": "SayDeck/1.0.0"
            }
            timeout = aiohttp.ClientTimeout(total=10)
            self.session = aiohttp.ClientSession(
                headers=headers,
                timeout=timeout
            )
    
    async def search_images(
        self, 
        query: str, 
        per_page: int = 15,
        orientation: str = "landscape",
        size: str = "medium"
    ) -> List[ImageResult]:
        """
        üîç –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (1-80)
            orientation: –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è (landscape, portrait, square)
            size: –†–∞–∑–º–µ—Ä (large, medium, small)
        
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        cache_key = f"{query}_{per_page}_{orientation}_{size}"
        if cache_key in self._cache:
            logger.info(f"üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫—ç—à–∞: {query}")
            return self._cache[cache_key]
        
        # Fallback –µ—Å–ª–∏ API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if not self.api_key or self.api_key == "your_pexels_api_key":
            logger.warning(f"üñºÔ∏è  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è: {query}")
            return await self._generate_placeholder_images(query, per_page)
        
        try:
            await self._ensure_session()
            
            params = {
                "query": query,
                "per_page": min(per_page, 80),  # –ú–∞–∫—Å–∏–º—É–º 80
                "orientation": orientation,
                "size": size
            }
            
            logger.info(f"üîç –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {query}")
            
            async with self.session.get(f"{self.BASE_URL}/search", params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    images = await self._parse_images(data)
                    
                    # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    self._cache[cache_key] = images
                    
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è: {query}")
                    return images
                
                elif response.status == 429:
                    logger.warning("‚ö†Ô∏è  –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ Pexels API")
                    return await self._generate_placeholder_images(query, per_page)
                
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ Pexels API: {response.status}")
                    return await self._generate_placeholder_images(query, per_page)
                    
        except asyncio.TimeoutError:
            logger.error(f"‚è∞ Timeout –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {query}")
            return await self._generate_placeholder_images(query, per_page)
        
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}")
            return await self._generate_placeholder_images(query, per_page)
    
    async def _parse_images(self, data: Dict) -> List[ImageResult]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ Pexels API –≤ –æ–±—ä–µ–∫—Ç—ã ImageResult"""
        images = []
        
        for photo in data.get("photos", []):
            try:
                # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–º–µ—Ä
                src = photo.get("src", {})
                url = src.get("large") or src.get("medium") or src.get("original")
                
                if url:
                    image = ImageResult(
                        id=photo.get("id"),
                        url=url,
                        original_url=photo.get("url"),
                        photographer=photo.get("photographer", "Unknown"),
                        photographer_url=photo.get("photographer_url", ""),
                        width=photo.get("width", 1920),
                        height=photo.get("height", 1080),
                        alt=photo.get("alt", "")
                    )
                    images.append(image)
                    
            except Exception as e:
                logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
                continue
        
        return images
    
    async def _generate_placeholder_images(self, query: str, count: int) -> List[ImageResult]:
        """
        üñºÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–æ–≥–¥–∞ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        """
        placeholders = []
        
        for i in range(min(count, 15)):
            # –†–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            width = 1920 if i % 3 == 0 else 1280
            height = 1080 if i % 3 == 0 else 720
            
            placeholder = ImageResult(
                id=f"placeholder_{i}",
                url=f"https://via.placeholder.com/{width}x{height}/4A90E2/FFFFFF?text={query.replace(' ', '+')}", 
                original_url=f"https://via.placeholder.com/{width}x{height}",
                photographer="Placeholder Service",
                photographer_url="https://placeholder.com",
                width=width,
                height=height,
                alt=f"Placeholder image for {query}"
            )
            placeholders.append(placeholder)
        
        logger.info(f"üñºÔ∏è  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(placeholders)} –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–ª—è: {query}")
        return placeholders
    
    async def get_image_by_id(self, image_id: int) -> Optional[ImageResult]:
        """
        üì∑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ ID
        """
        if not self.api_key or self.api_key == "your_pexels_api_key":
            return None
        
        try:
            await self._ensure_session()
            
            async with self.session.get(f"{self.BASE_URL}/photos/{image_id}") as response:
                if response.status == 200:
                    data = await response.json()
                    images = await self._parse_images({"photos": [data]})
                    return images[0] if images else None
                
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_id}: {str(e)}")
        
        return None
    
    def clear_cache(self):
        """üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        self._cache.clear()
        logger.info("üßπ –ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—á–∏—â–µ–Ω")
    
    async def search_for_slide_content(self, slide_content: str) -> Optional[ImageResult]:
        """
        üéØ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–ª–∞–π–¥–∞
        
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–ª–∞–π–¥–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        """
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        keywords = await self._extract_keywords(slide_content)
        
        if not keywords:
            return None
        
        # –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images = await self.search_images(keywords, per_page=5)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        return images[0] if images else None
    
    async def _extract_keywords(self, text: str) -> str:
        """
        üß† –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π NLP
        """
        
        # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        import re
        clean_text = re.sub(r'<[^>]+>', '', text)
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        words = clean_text.lower().split()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ (–±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä)
        stop_words = {
            'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 
            'of', 'with', 'by', 'is', 'are', 'was', 'were', 'be', 'been', 'being',
            '—ç—Ç–æ', '–≤', '–Ω–∞', '—Å', '–∏', '–∏–ª–∏', '–Ω–æ', '–¥–ª—è', '–æ—Ç', '–¥–æ', '–ø–æ'
        }
        
        keywords = [word for word in words if len(word) > 3 and word not in stop_words]
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2-3 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞
        return ' '.join(keywords[:3]) if keywords else text[:50]

    async def close_session(self):
        if self.session and not self.session.closed:
            await self.session.close()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
image_service = PexelsImageService()

async def search_images(query: str, count: int = 5) -> List[Dict[str, Any]]:
    """
    üöÄ –ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    
    Usage:
        images = await search_images("nature sunset", 10)
    """
    async with image_service as service:
        results = await service.search_images(query, per_page=count)
        return [img.to_dict() for img in results]

async def get_image_for_slide(slide_content: str) -> Optional[Dict[str, Any]]:
    """
    üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–ª–∞–π–¥–∞
    
    Usage:
        image = await get_image_for_slide("Machine Learning algorithms")
    """
    async with image_service as service:
        result = await service.search_for_slide_content(slide_content)
        return result.to_dict() if result else None
