"""
üöÄ Enhanced Presentation Generator
–†–æ—É—Ç–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º –∏ –≤—Å—Ç–∞–≤–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–ê–≤—Ç–æ—Ä: SayDeck Team
"""

import logging
import asyncio
import json
import re
from typing import List, Dict, Any, Optional
from fastapi import APIRouter, HTTPException, Depends, BackgroundTasks
from fastapi.responses import HTMLResponse
from pydantic import BaseModel

from ai_services.image_service import image_service, get_image_for_slide
from ai_services.manager import ai_manager
from ai_services import AIGenerationRequest, AIProviderType
from config.settings import get_settings

settings = get_settings()
logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/v1/enhanced", tags=["Enhanced Generation"])

class EnhancedPresentationRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"""
    topic: str
    slides_count: int = 5
    audience: str = "general"
    style: str = "professional"
    language: str = "ru"
    include_images: bool = True
    image_style: str = "professional"  # professional, creative, minimal
    auto_enhance: bool = True

class EnhancedPresentationUpdate(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"""
    topic: Optional[str] = None
    slides_count: Optional[int] = None
    audience: Optional[str] = None
    style: Optional[str] = None
    language: Optional[str] = None
    include_images: Optional[bool] = None
    image_style: Optional[str] = None
    auto_enhance: Optional[bool] = None

class SlideWithImage(BaseModel):
    """–°–ª–∞–π–¥ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    title: str
    content: str
    image: Optional[Dict[str, Any]] = None
    image_alt: str = ""
    layout: str = "title-content-image"

class EnhancedPresentationResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–µ–π"""
    title: str
    slides: List[SlideWithImage]
    total_slides: int
    generation_time: float
    images_found: int
    html_preview: Optional[str] = None

@router.post("/generate", response_model=EnhancedPresentationResponse)
async def generate_enhanced_presentation(
    request: EnhancedPresentationRequest,
    background_tasks: BackgroundTasks
) -> EnhancedPresentationResponse:
    """
    üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–∞–π–¥–∞
    - –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    - Fallback –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –ø—Ä–µ–≤—å—é
    """
    
    import time
    start_time = time.time()
    
    try:
        logger.info(f"üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {request.topic}")
        
        # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ AI manager
        ai_request = AIGenerationRequest(
            text=f"–°–æ–∑–¥–∞–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –Ω–∞ —Ç–µ–º—É: {request.topic}",
            topic=request.topic,
            slides_count=request.slides_count,
            language=request.language
        )
        
        try:
            base_response = await ai_manager.generate_presentation(ai_request)
            logger.info(f"‚úì AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {type(base_response)}")
        except Exception as ai_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(ai_error)}")
            # Fallback –Ω–∞ –¥–µ–º–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
            base_response = _create_demo_presentation(request)
        
        # base_response —Ç–µ–ø–µ—Ä—å dict, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç —Å content
        base_content = base_response
        
        # 2. –ü–∞—Ä—Å–∏–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        slides_data = await _parse_generated_content(base_content)
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –∫–∞–∂–¥–æ–º—É —Å–ª–∞–π–¥—É
        enhanced_slides = []
        images_found = 0
        
        if request.include_images:
            logger.info(f"üñºÔ∏è  –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è {len(slides_data)} —Å–ª–∞–π–¥–æ–≤")
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —Å–ª–∞–π–¥–æ–≤
            image_tasks = []
            for slide_data in slides_data:
                task = _find_image_for_slide(slide_data, request.image_style)
                image_tasks.append(task)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–æ–∏—Å–∫–∞
            slide_images = await asyncio.gather(*image_tasks, return_exceptions=True)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for i, slide_data in enumerate(slides_data):
                image_result = slide_images[i] if i < len(slide_images) else None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                if isinstance(image_result, Exception):
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–ª–∞–π–¥–∞ {i}: {str(image_result)}")
                    image_result = None
                
                if image_result:
                    images_found += 1
                
                enhanced_slide = SlideWithImage(
                    title=slide_data.get("title", ""),
                    content=slide_data.get("content", ""),
                    image=image_result,
                    image_alt=image_result.get("alt", "") if image_result else "",
                    layout="title-content-image" if image_result else "title-content"
                )
                enhanced_slides.append(enhanced_slide)
        else:
            # –°–æ–∑–¥–∞–µ–º —Å–ª–∞–π–¥—ã –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            for slide_data in slides_data:
                enhanced_slide = SlideWithImage(
                    title=slide_data.get("title", ""),
                    content=slide_data.get("content", ""),
                    layout="title-content"
                )
                enhanced_slides.append(enhanced_slide)
        
        # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –ø—Ä–µ–≤—å—é –≤ —Ñ–æ–Ω–µ
        html_preview = None
        if request.auto_enhance:
            background_tasks.add_task(
                _generate_html_preview, 
                enhanced_slides, 
                base_content.get("title", request.topic)
            )
        
        generation_time = time.time() - start_time
        
        logger.info(f"‚úÖ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞! –í—Ä–µ–º—è: {generation_time:.2f}—Å, –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_found}")
        
        return EnhancedPresentationResponse(
            title=base_content.get("title", request.topic),
            slides=enhanced_slides,
            total_slides=len(enhanced_slides),
            generation_time=generation_time,
            images_found=images_found,
            html_preview=html_preview
        )
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {str(e)}")
        raise HTTPException(
            status_code=500, 
            detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {str(e)}"
        )

async def _parse_generated_content(content: Dict[str, Any]) -> List[Dict[str, str]]:
    """
    üìù –ü–∞—Ä—Å–∏–Ω–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–∞–π–¥—ã
    """
    slides = []
    
    try:
        # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω
        if "slides" in content:
            return content["slides"]
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–∞–π–¥—ã
        text_content = content.get("content", str(content))
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        slide_sections = re.split(r'\n(?=#{1,3}\s)', text_content)
        
        for section in slide_sections:
            if not section.strip():
                continue
                
            lines = section.strip().split('\n')
            title = lines[0].strip('#').strip() if lines else ""
            content_lines = lines[1:] if len(lines) > 1 else []
            content = '\n'.join(content_lines).strip()
            
            if title:
                slides.append({
                    "title": title,
                    "content": content
                })
        
        # –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Å–ª–∞–π–¥
        if not slides:
            slides.append({
                "title": content.get("title", "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"),
                "content": text_content
            })
            
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {str(e)}")
        # Fallback
        slides.append({
            "title": "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", 
            "content": str(content)
        })
    
    return slides

async def _find_image_for_slide(slide_data: Dict[str, str], style: str) -> Optional[Dict[str, Any]]:
    """
    üîç –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–∞–π–¥–∞
    """
    try:
        title = slide_data.get("title", "")
        content = slide_data.get("content", "")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        search_query = f"{title} {content}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–µ–≤—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        if style == "professional":
            search_query += " business professional"
        elif style == "creative":
            search_query += " creative modern design"
        elif style == "minimal":
            search_query += " minimal clean simple"
        
        # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_result = await image_service.search_for_slide_content(search_query)
        return image_result.to_dict() if image_result else None
            
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        return None

async def _generate_html_preview(slides: List[SlideWithImage], title: str):
    """
    üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –ø—Ä–µ–≤—å—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ)
    """
    try:
        logger.info(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –ø—Ä–µ–≤—å—é –¥–ª—è: {title}")
        
        html_template = """
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>{title}</title>
            <style>
                body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }}
                .presentation {{ max-width: 1200px; margin: 0 auto; }}
                .slide {{ background: white; margin: 20px 0; padding: 30px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }}
                .slide-title {{ font-size: 24px; font-weight: bold; color: #333; margin-bottom: 15px; border-bottom: 2px solid #4A90E2; padding-bottom: 10px; }}
                .slide-content {{ font-size: 16px; line-height: 1.6; color: #666; margin-bottom: 20px; }}
                .slide-image {{ text-align: center; margin: 20px 0; }}
                .slide-image img {{ max-width: 100%; height: auto; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }}
                .image-credit {{ font-size: 12px; color: #999; margin-top: 5px; }}
                .header {{ text-align: center; margin-bottom: 40px; }}
                .header h1 {{ color: #333; font-size: 36px; margin-bottom: 10px; }}
                .header p {{ color: #666; font-size: 18px; }}
            </style>
        </head>
        <body>
            <div class="presentation">
                <div class="header">
                    <h1>{title}</h1>
                    <p>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é SayDeck AI</p>
                </div>
                {slides_html}
            </div>
        </body>
        </html>
        """
        
        slides_html = ""
        for i, slide in enumerate(slides, 1):
            slide_html = f"""
            <div class="slide">
                <div class="slide-title">{i}. {slide.title}</div>
                <div class="slide-content">{slide.content.replace(chr(10), '<br>')}</div>
            """
            
            if slide.image:
                slide_html += f"""
                <div class="slide-image">
                    <img src="{slide.image['url']}" alt="{slide.image_alt}" />
                    <div class="image-credit">
                        –§–æ—Ç–æ: {slide.image['photographer']} | –ò—Å—Ç–æ—á–Ω–∏–∫: Pexels
                    </div>
                </div>
                """
            
            slide_html += "</div>"
            slides_html += slide_html
        
        final_html = html_template.format(
            title=title,
            slides_html=slides_html
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –∏–ª–∏ –∫—ç—à (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        logger.info(f"‚úÖ HTML –ø—Ä–µ–≤—å—é –≥–æ—Ç–æ–≤")
        
        return final_html
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –ø—Ä–µ–≤—å—é: {str(e)}")
        return None

@router.get("/search-images")
async def search_images_endpoint(
    query: str, 
    count: int = 10,
    style: str = "professional"
) -> Dict[str, Any]:
    """
    üîç API –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    """
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–µ–≤—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        enhanced_query = query
        if style == "professional":
            enhanced_query += " business professional"
        elif style == "creative":
            enhanced_query += " creative modern design"
        elif style == "minimal":
            enhanced_query += " minimal clean"
        
        results = await image_service.search_images(enhanced_query, per_page=count)
            
        return {
            "query": query,
            "enhanced_query": enhanced_query,
            "count": len(results),
            "images": [img.to_dict() for img in results]
        }
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/analyze-slide")
async def analyze_slide_for_image(slide_content: str) -> Dict[str, Any]:
    """
    üß† –ê–Ω–∞–ª–∏–∑ —Å–ª–∞–π–¥–∞ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    try:
        keywords = await image_service._extract_keywords(slide_content)
        image = await image_service.search_for_slide_content(slide_content)
        
        return {
            "original_content": slide_content,
            "extracted_keywords": keywords,
            "suggested_image": image.to_dict() if image else None
        }
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–∞–π–¥–∞: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/health")
async def health_check() -> Dict[str, Any]:
    """
    ‚ù§Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Pexels API
        pexels_status = "ok" if image_service.api_key and image_service.api_key != "your_pexels_api_key" else "no_api_key"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º AI —Å–µ—Ä–≤–∏—Å—ã
        ai_status = "ok" if ai_manager else "not_available"
        
        return {
            "status": "healthy",
            "service": "enhanced_generator",
            "services": {
                "pexels_api": pexels_status,
                "ai_services": ai_status
            },
            "endpoints": {
                "create": "POST /api/v1/enhanced/generate",
                "update": "PUT /api/v1/enhanced/presentation/{id}",
                "get": "GET /api/v1/enhanced/presentation/{id}", 
                "delete": "DELETE /api/v1/enhanced/presentation/{id}",
                "search_images": "GET /api/v1/enhanced/search-images",
                "analyze_slide": "POST /api/v1/enhanced/analyze-slide"
            },
            "features": [
                "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏",
                "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π", 
                "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π",
                "–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Pexels API",
                "–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –ø—Ä–µ–≤—å—é"
            ],
            "cache_size": len(image_service._cache) if hasattr(image_service, '_cache') else 0,
            "version": settings.VERSION
        }
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {str(e)}")
        return {
            "status": "error",
            "error": str(e)
        }

def _create_demo_presentation(request: EnhancedPresentationRequest) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö AI"""
    
    demo_slides = []
    
    for i in range(request.slides_count):
        if i == 0:
            demo_slides.append({
                "title": f"–í–≤–µ–¥–µ–Ω–∏–µ –≤ —Ç–µ–º—É: {request.topic}",
                "content": f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –æ —Ç–µ–º–µ '{request.topic}'. –≠—Ç–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {request.audience}."
            })
        elif i == request.slides_count - 1:
            demo_slides.append({
                "title": "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ",
                "content": f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã —Ç–µ–º—ã '{request.topic}'. –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –±—ã–ª–∞ –ø–æ–ª–µ–∑–Ω–æ–π."
            })
        else:
            demo_slides.append({
                "title": f"–ü—É–Ω–∫—Ç {i}: –ö–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã",
                "content": f"–ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤–∞–∂–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ —Ç–µ–º–µ '{request.topic}'. –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–ª—è {request.audience}."
            })
    
    return {
        "title": f"–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: {request.topic}",
        "slides": demo_slides
    }

@router.put("/presentation/{presentation_id}", response_model=EnhancedPresentationResponse)
async def update_enhanced_presentation(
    presentation_id: int,
    update_request: EnhancedPresentationUpdate,
    background_tasks: BackgroundTasks
) -> EnhancedPresentationResponse:
    """
    ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
    - –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    """
    
    import time
    start_time = time.time()
    
    try:
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ ID: {presentation_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
        update_data = update_request.dict(exclude_unset=True)
        
        if not update_data:
            raise HTTPException(
                status_code=400,
                detail="–ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
            )
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        current_request = EnhancedPresentationRequest(
            topic=update_data.get("topic", "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"),
            slides_count=update_data.get("slides_count", 5),
            audience=update_data.get("audience", "general"),
            style=update_data.get("style", "professional"),
            language=update_data.get("language", "ru"),
            include_images=update_data.get("include_images", True),
            image_style=update_data.get("image_style", "professional"),
            auto_enhance=update_data.get("auto_enhance", True)
        )
        
        logger.info(f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_data}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
        ai_request = AIGenerationRequest(
            text=f"–û–±–Ω–æ–≤–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –Ω–∞ —Ç–µ–º—É: {current_request.topic}",
            topic=current_request.topic,
            slides_count=current_request.slides_count,
            language=current_request.language
        )
        
        try:
            base_response = await ai_manager.generate_presentation(ai_request)
            logger.info(f"‚úì AI –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        except Exception as ai_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(ai_error)}")
            base_response = _create_demo_presentation(current_request)
        
        base_content = base_response
        slides_data = await _parse_generated_content(base_content)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        enhanced_slides = []
        images_found = 0
        
        if current_request.include_images:
            logger.info(f"üñºÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è {len(slides_data)} —Å–ª–∞–π–¥–æ–≤")
            
            image_tasks = []
            for slide_data in slides_data:
                task = _find_image_for_slide(slide_data, current_request.image_style)
                image_tasks.append(task)
            
            slide_images = await asyncio.gather(*image_tasks, return_exceptions=True)
            
            for i, slide_data in enumerate(slides_data):
                image_result = slide_images[i] if i < len(slide_images) else None
                
                if isinstance(image_result, Exception):
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–ª–∞–π–¥–∞ {i}: {str(image_result)}")
                    image_result = None
                
                if image_result:
                    images_found += 1
                
                enhanced_slide = SlideWithImage(
                    title=slide_data.get("title", ""),
                    content=slide_data.get("content", ""),
                    image=image_result,
                    image_alt=image_result.get("alt", "") if image_result else "",
                    layout="title-content-image" if image_result else "title-content"
                )
                enhanced_slides.append(enhanced_slide)
        else:
            for slide_data in slides_data:
                enhanced_slide = SlideWithImage(
                    title=slide_data.get("title", ""),
                    content=slide_data.get("content", ""),
                    layout="title-content"
                )
                enhanced_slides.append(enhanced_slide)
        
        generation_time = time.time() - start_time
        
        logger.info(f"‚úÖ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –í—Ä–µ–º—è: {generation_time:.2f}—Å, –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_found}")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
        
        return EnhancedPresentationResponse(
            title=base_content.get("title", current_request.topic),
            slides=enhanced_slides,
            total_slides=len(enhanced_slides),
            generation_time=generation_time,
            images_found=images_found,
            html_preview=None
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {str(e)}"
        )

@router.delete("/presentation/{presentation_id}")
async def delete_enhanced_presentation(presentation_id: int) -> Dict[str, Any]:
    """
    üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ ID
    - –û—á–∏—Å—Ç–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
    """
    
    try:
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ ID: {presentation_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
        if presentation_id <= 0:
            raise HTTPException(
                status_code=400,
                detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"
            )
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        # –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
        
        # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        if presentation_id > 10000:  # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
            raise HTTPException(
                status_code=404,
                detail=f"–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Å ID {presentation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã:
        # 1. –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # 2. –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        # 3. –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        
        logger.info(f"‚úÖ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è {presentation_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        
        return {
            "success": True,
            "message": f"–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è {presentation_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
            "presentation_id": presentation_id,
            "deleted_at": "2025-07-07T15:00:00Z"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {str(e)}"
        )

@router.get("/presentation/{presentation_id}")
async def get_enhanced_presentation(presentation_id: int) -> Dict[str, Any]:
    """
    üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ ID
    
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
    """
    
    try:
        logger.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ ID: {presentation_id}")
        
        if presentation_id <= 0:
            raise HTTPException(
                status_code=400,
                detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"
            )
        
        # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        if presentation_id > 10000:
            raise HTTPException(
                status_code=404,
                detail=f"–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Å ID {presentation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ –ë–î
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        
        demo_slides = [
            {
                "title": "–î–µ–º–æ —Å–ª–∞–π–¥ 1",
                "content": "–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–∞–π–¥–∞",
                "image": {
                    "url": "https://images.pexels.com/photos/574077/pexels-photo-574077.jpeg",
                    "alt": "Demo image",
                    "photographer": "Demo Author"
                },
                "layout": "title-content-image"
            }
        ]
        
        return {
            "presentation_id": presentation_id,
            "title": f"–î–µ–º–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è {presentation_id}",
            "slides": demo_slides,
            "total_slides": len(demo_slides),
            "created_at": "2025-07-07T14:00:00Z",
            "updated_at": "2025-07-07T15:00:00Z",
            "images_count": 1,
            "status": "ready"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {str(e)}"
        )
