#!/usr/bin/env python3
"""
üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /boards
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏
"""

import asyncio
import aiohttp
import json

async def test_boards_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º POST /api/v1/boards"""
    
    base_url = "http://localhost:8000"
    
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /boards")
    print("=" * 50)
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º health check
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{base_url}/api/v1/health") as response:
                if response.status == 200:
                    print("‚úÖ API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    print(f"‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                    return
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return
    
    # –¢–µ—Å—Ç 1: POST –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 401)
    print("\nüìù –¢–µ—Å—Ç 1: POST /api/v1/boards –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    try:
        async with aiohttp.ClientSession() as session:
            test_data = {
                "name": "–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ—Å–∫–∞",
                "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –¥–æ—Å–∫–∏"
            }
            
            async with session.post(
                f"{base_url}/api/v1/boards/",
                json=test_data,
                headers={"Content-Type": "application/json"}
            ) as response:
                
                print(f"   –°—Ç–∞—Ç—É—Å: {response.status}")
                text = await response.text()
                print(f"   –û—Ç–≤–µ—Ç: {text[:200]}...")
                
                if response.status == 401:
                    print("   ‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                elif response.status == 500:
                    print("   ‚ùå –û—à–∏–±–∫–∞ 500 - –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!")
                    try:
                        error_data = json.loads(text)
                        print(f"   üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_data.get('detail', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')}")
                    except:
                        print(f"   üîç –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {text}")
                else:
                    print(f"   ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status}")
                    
    except Exception as e:
        print(f"   üí• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    # –¢–µ—Å—Ç 2: POST —Å —Ñ–µ–π–∫–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
    print("\nüìù –¢–µ—Å—Ç 2: POST /api/v1/boards —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º")
    try:
        async with aiohttp.ClientSession() as session:
            test_data = {
                "name": "–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ—Å–∫–∞",
                "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –¥–æ—Å–∫–∏"
            }
            
            async with session.post(
                f"{base_url}/api/v1/boards/",
                json=test_data,
                headers={
                    "Content-Type": "application/json",
                    "Authorization": "Bearer fake_token_12345"
                }
            ) as response:
                
                print(f"   –°—Ç–∞—Ç—É—Å: {response.status}")
                text = await response.text()
                print(f"   –û—Ç–≤–µ—Ç: {text[:200]}...")
                
                if response.status == 401:
                    print("   ‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω")
                elif response.status == 500:
                    print("   ‚ùå –û—à–∏–±–∫–∞ 500 - –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!")
                    try:
                        error_data = json.loads(text)
                        print(f"   üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_data.get('detail', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')}")
                    except:
                        print(f"   üîç –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {text}")
                        
    except Exception as e:
        print(f"   üí• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω
    print("\nüìù –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞")
    
    test_user = {
        "email": "test_boards@example.com",
        "password": "testpass123",
        "username": "test_boards_user"
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with session.post(
                f"{base_url}/api/v1/auth/register",
                json=test_user,
                headers={"Content-Type": "application/json"}
            ) as response:
                
                print(f"   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –°—Ç–∞—Ç—É—Å: {response.status}")
                reg_text = await response.text()
                
                if response.status in [200, 201]:
                    print("   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")
                elif response.status == 400 and "already registered" in reg_text:
                    print("   ‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    print(f"   ‚ö†Ô∏è  –û—Ç–≤–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_text[:200]}...")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏
            login_data = {
                "email": test_user["email"],
                "password": test_user["password"]
            }
            
            async with session.post(
                f"{base_url}/api/v1/auth/login",
                json=login_data,
                headers={"Content-Type": "application/json"}
            ) as response:
                
                print(f"   –õ–æ–≥–∏–Ω - –°—Ç–∞—Ç—É—Å: {response.status}")
                login_text = await response.text()
                
                if response.status == 200:
                    try:
                        login_data = json.loads(login_text)
                        token = login_data.get("access_token")
                        
                        if token:
                            print("   ‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
                            
                            # –¢–µ—Å—Ç 4: POST —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
                            print("\nüìù –¢–µ—Å—Ç 4: POST /api/v1/boards —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º")
                            
                            board_data = {
                                "name": "–ú–æ—è —Ç–µ—Å—Ç–æ–≤–∞—è –¥–æ—Å–∫–∞",
                                "description": "–°–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API"
                            }
                            
                            async with session.post(
                                f"{base_url}/api/v1/boards/",
                                json=board_data,
                                headers={
                                    "Content-Type": "application/json",
                                    "Authorization": f"Bearer {token}"
                                }
                            ) as response:
                                
                                print(f"   –°—Ç–∞—Ç—É—Å: {response.status}")
                                board_text = await response.text()
                                
                                if response.status == 200:
                                    print("   ‚úÖ –î–æ—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
                                    try:
                                        board_result = json.loads(board_text)
                                        print(f"   üìã ID –¥–æ—Å–∫–∏: {board_result.get('id')}")
                                        print(f"   üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {board_result.get('name')}")
                                    except:
                                        print(f"   üìã –û—Ç–≤–µ—Ç: {board_text}")
                                        
                                elif response.status == 500:
                                    print("   ‚ùå –û–®–ò–ë–ö–ê 500 - –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞–π–¥–µ–Ω–∞!")
                                    try:
                                        error_data = json.loads(board_text)
                                        print(f"   üîç –î–µ—Ç–∞–ª–∏: {error_data.get('detail', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')}")
                                    except:
                                        print(f"   üîç –°—ã—Ä–∞—è –æ—à–∏–±–∫–∞: {board_text}")
                                else:
                                    print(f"   ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {board_text[:200]}...")
                        else:
                            print("   ‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                            
                    except json.JSONDecodeError:
                        print(f"   ‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –ª–æ–≥–∏–Ω–∞: {login_text[:200]}...")
                        
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {login_text[:200]}...")
                    
    except Exception as e:
        print(f"   üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π: {e}")
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\nüìù –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    try:
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ª—é–±–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ë–î
            async with session.get(f"{base_url}/api/v1/templates") as response:
                print(f"   Templates endpoint —Å—Ç–∞—Ç—É—Å: {response.status}")
                if response.status == 200:
                    print("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
                elif response.status == 500:
                    text = await response.text()
                    print("   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö!")
                    print(f"   üîç –û—à–∏–±–∫–∞: {text[:200]}...")
                    
    except Exception as e:
        print(f"   üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")

if __name__ == "__main__":
    print("üß™ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /boards")
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏ 500")
    print()
    
    asyncio.run(test_boards_endpoint())
    
    print("\n" + "=" * 50)
    print("üèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print()
    print("üìã –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏ 500:")
    print("1. –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    print("2. –û—à–∏–±–∫–∞ –≤ –º–æ–¥–µ–ª–∏ Board –∏–ª–∏ User")
    print("3. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print("4. –û—à–∏–±–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö (get_session, get_current_user)")
    print("5. –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ —Ç–∞–±–ª–∏—Ü")
