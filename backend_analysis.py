#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –≤ –±—ç–∫–µ–Ω–¥–µ SayDeck
"""

import os
import sys
import importlib
from typing import List, Dict, Any

def analyze_imports():
    """–ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ê–ù–ê–õ–ò–ó –ò–ú–ü–û–†–¢–û–í –ò –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    print("=" * 50)
    
    modules_to_check = [
        'main',
        'config.settings',
        'models.base',
        'models.user',
        'models.presentation',
        'models.board',
        'models.template',
        'models.userpreferences',
        'routers.auth',
        'routers.presentations',
        'routers.generate',
        'routers.boards',
        'routers.templates',
        'routers.preferences',
        'utils.auth',
        'utils.openai_client',
        'schemas.user',
        'schemas.presentation',
        'schemas.board',
        'schemas.template',
        'schemas.userpreferences'
    ]
    
    import_errors = []
    missing_modules = []
    
    for module in modules_to_check:
        try:
            importlib.import_module(module)
            print(f"‚úÖ {module}")
        except ImportError as e:
            print(f"‚ùå {module}: {e}")
            import_errors.append((module, str(e)))
        except Exception as e:
            print(f"‚ö†Ô∏è  {module}: {e}")
            missing_modules.append((module, str(e)))
    
    return import_errors, missing_modules

def analyze_configuration():
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüîß –ê–ù–ê–õ–ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("=" * 50)
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª .env")
    else:
        print("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_env_vars = [
        'POSTGRES_USER',
        'POSTGRES_PASSWORD', 
        'POSTGRES_SERVER',
        'POSTGRES_PORT',
        'POSTGRES_DB',
        'REDIS_HOST',
        'OPENAI_API_KEY'
    ]
    
    for var in required_env_vars:
        if not os.getenv(var):
            print(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {var}")
        else:
            print(f"‚úÖ {var} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    return issues

def analyze_database_models():
    """–ê–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è  –ê–ù–ê–õ–ò–ó –ú–û–î–ï–õ–ï–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    issues = []
    
    try:
        from models.base import Base, engine
        from models.user import User
        from models.presentation import Presentation
        from models.board import Board
        from models.template import Template
        from models.userpreferences import UserPreferences
        
        print("‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
        if hasattr(User, 'presentations'):
            print("‚úÖ –°–≤—è–∑—å User -> Presentation")
        else:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–≤—è–∑—å User -> Presentation")
            issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–≤—è–∑—å User -> Presentation")
        
        if hasattr(User, 'boards'):
            print("‚úÖ –°–≤—è–∑—å User -> Board")
        else:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–≤—è–∑—å User -> Board")
            issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–≤—è–∑—å User -> Board")
        
        if hasattr(Presentation, 'user_id'):
            print("‚úÖ –ü–æ–ª–µ user_id –≤ Presentation")
        else:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ user_id –≤ Presentation")
            issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ user_id –≤ Presentation")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–æ–¥–µ–ª–µ–π: {e}")
        issues.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–æ–¥–µ–ª–µ–π: {e}")
    
    return issues

def analyze_routers():
    """–ê–Ω–∞–ª–∏–∑ —Ä–æ—É—Ç–µ—Ä–æ–≤"""
    print("\nüõ£Ô∏è  –ê–ù–ê–õ–ò–ó –†–û–£–¢–ï–†–û–í")
    print("=" * 50)
    
    issues = []
    
    routers_to_check = [
        ('auth', 'routers.auth'),
        ('presentations', 'routers.presentations'),
        ('generate', 'routers.generate'),
        ('boards', 'routers.boards'),
        ('templates', 'routers.templates'),
        ('preferences', 'routers.preferences')
    ]
    
    for router_name, module_path in routers_to_check:
        try:
            module = importlib.import_module(module_path)
            if hasattr(module, 'router'):
                print(f"‚úÖ {router_name}: router –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚ùå {router_name}: router –Ω–µ –Ω–∞–π–¥–µ–Ω")
                issues.append(f"Router {router_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            print(f"‚ùå {router_name}: {e}")
            issues.append(f"–û—à–∏–±–∫–∞ –≤ router {router_name}: {e}")
    
    return issues

def analyze_utils():
    """–ê–Ω–∞–ª–∏–∑ —É—Ç–∏–ª–∏—Ç"""
    print("\nüîß –ê–ù–ê–õ–ò–ó –£–¢–ò–õ–ò–¢")
    print("=" * 50)
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ auth utils
    try:
        from utils.auth import (
            verify_password,
            get_password_hash,
            create_access_token,
            get_current_user
        )
        print("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ auth –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ auth utils: {e}")
        issues.append(f"–û—à–∏–±–∫–∞ –≤ auth utils: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI utils
    try:
        from utils.openai_client import (
            transcribe_audio,
            generate_presentation_structure,
            generate_presentation_pptx
        )
        print("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ OpenAI –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ OpenAI utils: {e}")
        issues.append(f"–û—à–∏–±–∫–∞ –≤ OpenAI utils: {e}")
    
    return issues

def analyze_schemas():
    """–ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º Pydantic"""
    print("\nüìã –ê–ù–ê–õ–ò–ó –°–•–ï–ú PYDANTIC")
    print("=" * 50)
    
    issues = []
    
    schemas_to_check = [
        ('user', 'schemas.user'),
        ('presentation', 'schemas.presentation'),
        ('board', 'schemas.board'),
        ('template', 'schemas.template'),
        ('userpreferences', 'schemas.userpreferences')
    ]
    
    for schema_name, module_path in schemas_to_check:
        try:
            module = importlib.import_module(module_path)
            print(f"‚úÖ {schema_name}: –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            print(f"‚ùå {schema_name}: {e}")
            issues.append(f"–û—à–∏–±–∫–∞ –≤ —Å—Ö–µ–º–µ {schema_name}: {e}")
    
    return issues

def analyze_main_app():
    """–ê–Ω–∞–ª–∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüöÄ –ê–ù–ê–õ–ò–ó –ì–õ–ê–í–ù–û–ì–û –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø")
    print("=" * 50)
    
    issues = []
    
    try:
        from main import app
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ middleware
        if hasattr(app, 'user_middleware_stack'):
            print("‚úÖ Middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        else:
            print("‚ùå Middleware –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            issues.append("Middleware –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤
        if hasattr(app, 'routes'):
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(app.routes)} —Ä–æ—É—Ç–æ–≤")
        else:
            print("‚ùå –†–æ—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            issues.append("–†–æ—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π
        if hasattr(app, 'router'):
            print("‚úÖ Router –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("‚ùå Router –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            issues.append("Router –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        issues.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    
    return issues

def analyze_security():
    """–ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("\nüîí –ê–ù–ê–õ–ò–ó –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    print("=" * 50)
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS
    try:
        from main import app
        from fastapi.middleware.cors import CORSMiddleware
        
        cors_configured = False
        for middleware in app.user_middleware_stack:
            if isinstance(middleware.cls, type) and middleware.cls == CORSMiddleware:
                cors_configured = True
                break
        
        if cors_configured:
            print("‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("‚ùå CORS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            issues.append("CORS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ CORS: {e}")
        issues.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ CORS: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    try:
        from fastapi_limiter import FastAPILimiter
        print("‚úÖ FastAPI Limiter –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError:
        print("‚ùå FastAPI Limiter –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        issues.append("FastAPI Limiter –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT
    try:
        from jose import JWTError, jwt
        print("‚úÖ JWT –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
    except ImportError:
        print("‚ùå JWT –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        issues.append("JWT –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    return issues

def generate_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∞–Ω–∞–ª–∏–∑—É"""
    print("üîç –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ë–≠–ö–ï–ù–î–ê SAYDECK")
    print("=" * 60)
    
    all_issues = []
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
    import_errors, missing_modules = analyze_imports()
    config_issues = analyze_configuration()
    db_issues = analyze_database_models()
    router_issues = analyze_routers()
    utils_issues = analyze_utils()
    schema_issues = analyze_schemas()
    app_issues = analyze_main_app()
    security_issues = analyze_security()
    
    # –°–±–æ—Ä –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º
    all_issues.extend(import_errors)
    all_issues.extend(missing_modules)
    all_issues.extend(config_issues)
    all_issues.extend(db_issues)
    all_issues.extend(router_issues)
    all_issues.extend(utils_issues)
    all_issues.extend(schema_issues)
    all_issues.extend(app_issues)
    all_issues.extend(security_issues)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    if not all_issues:
        print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–†–û–ë–õ–ï–ú –ù–ï –ù–ê–ô–î–ï–ù–û!")
        print("‚úÖ –ë—ç–∫–µ–Ω–¥ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        print(f"‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–û {len(all_issues)} –ü–†–û–ë–õ–ï–ú:")
        print()
        
        for i, issue in enumerate(all_issues, 1):
            if isinstance(issue, tuple):
                print(f"{i}. {issue[0]}: {issue[1]}")
            else:
                print(f"{i}. {issue}")
        
        print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ .env")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Redis —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        print("5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API")
    
    return all_issues

if __name__ == "__main__":
    generate_report() 