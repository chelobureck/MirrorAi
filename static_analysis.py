#!/usr/bin/env python3
"""
üîß –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å /boards —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–º
–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
"""

import os
import sys
import ast
import importlib.util

def check_file_exists(filepath, description):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    if os.path.exists(filepath):
        print(f"‚úÖ {description}: {filepath}")
        return True
    else:
        print(f"‚ùå {description} –ù–ï –ù–ê–ô–î–ï–ù: {filepath}")
        return False

def check_python_syntax(filepath):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–∞"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            source = f.read()
        ast.parse(source)
        print(f"‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {os.path.basename(filepath)}")
        return True
    except SyntaxError as e:
        print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {filepath}: {e}")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å {filepath}: {e}")
        return False

def analyze_imports(filepath):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ —Ñ–∞–π–ª–µ"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            source = f.read()
        
        tree = ast.parse(source)
        imports = []
        
        for node in ast.walk(tree):
            if isinstance(node, ast.Import):
                for alias in node.names:
                    imports.append(alias.name)
            elif isinstance(node, ast.ImportFrom):
                module = node.module or ""
                for alias in node.names:
                    imports.append(f"{module}.{alias.name}")
        
        print(f"üì¶ –ò–º–ø–æ—Ä—Ç—ã –≤ {os.path.basename(filepath)}:")
        for imp in imports[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"   - {imp}")
        if len(imports) > 10:
            print(f"   ... –∏ –µ—â–µ {len(imports) - 10}")
            
        return imports
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç—ã –≤ {filepath}: {e}")
        return []

def check_model_relationships():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤—è–∑–∏ –≤ –º–æ–¥–µ–ª—è—Ö"""
    print("\nüîó –ü–†–û–í–ï–†–ö–ê –°–í–Ø–ó–ï–ô –í –ú–û–î–ï–õ–Ø–•")
    print("=" * 30)
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º User –º–æ–¥–µ–ª—å
    user_model = "C:\\Users\\bestcomp\\SayDeck\\models\\user.py"
    if os.path.exists(user_model):
        try:
            with open(user_model, 'r', encoding='utf-8') as f:
                content = f.read()
            
            if 'boards' in content and 'relationship' in content:
                print("‚úÖ User –º–æ–¥–µ–ª—å –∏–º–µ–µ—Ç —Å–≤—è–∑—å —Å boards")
            else:
                print("‚ö†Ô∏è User –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –Ω–µ –∏–º–µ—Ç—å —Å–≤—è–∑–∏ —Å boards")
                print("   –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞—Ç–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è User –º–æ–¥–µ–ª–∏: {e}")
    else:
        print("‚ùå User –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

def check_schemas():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ö–µ–º—ã Pydantic"""
    print("\nüìã –ü–†–û–í–ï–†–ö–ê –°–•–ï–ú PYDANTIC")
    print("=" * 30)
    
    board_schema = "C:\\Users\\bestcomp\\SayDeck\\schemas\\board.py"
    if os.path.exists(board_schema):
        try:
            with open(board_schema, 'r', encoding='utf-8') as f:
                content = f.read()
            
            required_classes = ['BoardBase', 'BoardCreate', 'BoardResponse']
            for class_name in required_classes:
                if f"class {class_name}" in content:
                    print(f"‚úÖ {class_name} –Ω–∞–π–¥–µ–Ω")
                else:
                    print(f"‚ùå {class_name} –ù–ï –ù–ê–ô–î–ï–ù")
                    
            # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if 'from_attributes = True' in content or 'orm_mode = True' in content:
                print("‚úÖ ORM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            else:
                print("‚ö†Ô∏è ORM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ö–µ–º: {e}")

def check_auth_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("\nüîê –ü–†–û–í–ï–†–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
    print("=" * 30)
    
    auth_file = "C:\\Users\\bestcomp\\SayDeck\\utils\\auth.py"
    if os.path.exists(auth_file):
        try:
            with open(auth_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            functions_to_check = [
                'get_current_user',
                'create_access_token', 
                'verify_password'
            ]
            
            for func in functions_to_check:
                if f"def {func}" in content or f"async def {func}" in content:
                    print(f"‚úÖ {func} –Ω–∞–π–¥–µ–Ω–∞")
                else:
                    print(f"‚ùå {func} –ù–ï –ù–ê–ô–î–ï–ù–ê")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
            critical_imports = ['jose', 'passlib', 'fastapi.security']
            for imp in critical_imports:
                if imp in content:
                    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç {imp} –Ω–∞–π–¥–µ–Ω")
                else:
                    print(f"‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç {imp} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è auth.py: {e}")

def main():
    print("üîç –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –° /boards")
    print("=" * 50)
    
    base_path = "C:\\Users\\bestcomp\\SayDeck"
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    print("\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í")
    print("-" * 20)
    
    key_files = {
        f"{base_path}\\routers\\boards.py": "–†–æ—É—Ç–µ—Ä boards",
        f"{base_path}\\models\\board.py": "–ú–æ–¥–µ–ª—å Board", 
        f"{base_path}\\models\\user.py": "–ú–æ–¥–µ–ª—å User",
        f"{base_path}\\schemas\\board.py": "–°—Ö–µ–º—ã Board",
        f"{base_path}\\utils\\auth.py": "–£—Ç–∏–ª–∏—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        f"{base_path}\\config\\settings.py": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        f"{base_path}\\main.py": "–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª"
    }
    
    all_files_exist = True
    for filepath, description in key_files.items():
        if not check_file_exists(filepath, description):
            all_files_exist = False
    
    if not all_files_exist:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    print("\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê")
    print("-" * 20)
    
    for filepath in key_files.keys():
        check_python_syntax(filepath)
    
    # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
    print("\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ò–ú–ü–û–†–¢–û–í")
    print("-" * 20)
    
    analyze_imports(f"{base_path}\\routers\\boards.py")
    
    # 4. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_model_relationships()
    check_schemas() 
    check_auth_dependencies()
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏ 500
    print("\nüéØ –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –û–®–ò–ë–ö–ò 500")
    print("=" * 40)
    
    potential_issues = [
        {
            "issue": "–ü—Ä–æ–±–ª–µ–º—ã —Å JWT —Ç–æ–∫–µ–Ω–æ–º",
            "check": "SECRET_KEY –≤ settings.py",
            "solution": "–£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ SECRET_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
        },
        {
            "issue": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î",
            "check": "get_current_user –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None",
            "solution": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT"
        },
        {
            "issue": "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Pydantic",
            "check": "BoardCreate —Å—Ö–µ–º–∞",
            "solution": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª–µ–π –≤ —Å—Ö–µ–º–µ –∏ –º–æ–¥–µ–ª–∏"
        },
        {
            "issue": "–ü—Ä–æ–±–ª–µ–º—ã —Å SQLAlchemy —Å–µ—Å—Å–∏–µ–π",
            "check": "get_session dependency",
            "solution": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        },
        {
            "issue": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –≤ –º–æ–¥–µ–ª–∏",
            "check": "Board.description –ø–æ–ª–µ",
            "solution": "–£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ –ø–æ–ª—è —Å—Ö–µ–º—ã –µ—Å—Ç—å –≤ –º–æ–¥–µ–ª–∏"
        }
    ]
    
    for i, issue_info in enumerate(potential_issues, 1):
        print(f"{i}. {issue_info['issue']}")
        print(f"   –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: {issue_info['check']}")
        print(f"   –†–µ—à–µ–Ω–∏–µ: {issue_info['solution']}")
        print()
    
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("1. –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–æ—É—Ç–µ—Ä (—É–∂–µ —Å–¥–µ–ª–∞–Ω–æ)")
    print("2. –î–æ–±–∞–≤–∏—Ç—å try-catch –±–ª–æ–∫–∏ (—É–∂–µ —Å–¥–µ–ª–∞–Ω–æ)")
    print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ JWT –≤ config/settings.py")
    print("4. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ description –ø–æ–ª–µ –µ—Å—Ç—å –≤ –º–æ–¥–µ–ª–∏ Board")
    print("5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    print(f"\nüèÅ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()
