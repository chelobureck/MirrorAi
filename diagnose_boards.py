#!/usr/bin/env python3
"""
üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /boards
–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫—Ä–æ–º–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import aiohttp
import json
from datetime import datetime

async def test_boards_endpoint():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å /boards —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–º"""
    
    base_url = "http://localhost:8000"
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –≠–ù–î–ü–û–ò–ù–¢–ê /boards")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{base_url}/api/v1/health", timeout=5) as response:
                if response.status == 200:
                    print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
                    health_data = await response.json()
                    print(f"   –°—Ç–∞—Ç—É—Å: {health_data.get('status', 'unknown')}")
                else:
                    print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: {response.status})")
                    return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    # –¢–µ—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    try:
        async with aiohttp.ClientSession() as session:
            print("   –¢–µ—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞...")
            async with session.post(
                f"{base_url}/api/v1/boards/",
                json={"name": "Test Board"},
                timeout=10
            ) as response:
                print(f"   –ë–µ–∑ —Ç–æ–∫–µ–Ω–∞: {response.status}")
                if response.status != 401:
                    error_text = await response.text()
                    print(f"   –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {error_text[:200]}...")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞: {e}")
    
    # –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    try:
        async with aiohttp.ClientSession() as session:
            print("   –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º...")
            headers = {"Authorization": "Bearer invalid_token_123"}
            async with session.post(
                f"{base_url}/api/v1/boards/",
                json={"name": "Test Board"},
                headers=headers,
                timeout=10
            ) as response:
                print(f"   –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω: {response.status}")
                if response.status != 401:
                    error_text = await response.text()
                    print(f"   –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {error_text[:200]}...")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø—Ä–æ—Å–∞
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    test_cases = [
        ("–ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ", {}),
        ("–¢–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ", {"name": "Test Board"}),
        ("–° –æ–ø–∏—Å–∞–Ω–∏–µ–º", {"name": "Test Board", "description": "Test Description"}),
        ("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø", {"name": 123}),
        ("–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", {"name": "x" * 1000}),
    ]
    
    for case_name, data in test_cases:
        try:
            async with aiohttp.ClientSession() as session:
                print(f"   –¢–µ—Å—Ç: {case_name}")
                headers = {"Authorization": "Bearer fake_token_for_validation_test"}
                async with session.post(
                    f"{base_url}/api/v1/boards/",
                    json=data,
                    headers=headers,
                    timeout=10
                ) as response:
                    print(f"     –°—Ç–∞—Ç—É—Å: {response.status}")
                    
                    if response.status == 500:
                        error_text = await response.text()
                        print(f"     ‚ùå –û–®–ò–ë–ö–ê 500: {error_text[:200]}...")
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫—É
                        try:
                            error_json = json.loads(error_text)
                            print(f"     –î–µ—Ç–∞–ª–∏: {error_json.get('detail', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')}")
                        except:
                            pass
                    elif response.status in [401, 422]:
                        print(f"     ‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏/–≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                    else:
                        resp_text = await response.text()
                        print(f"     –û—Ç–≤–µ—Ç: {resp_text[:100]}...")
                        
        except Exception as e:
            print(f"     ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º GET —ç–Ω–¥–ø–æ–∏–Ω—Ç
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ GET /boards...")
    try:
        async with aiohttp.ClientSession() as session:
            headers = {"Authorization": "Bearer fake_token"}
            async with session.get(
                f"{base_url}/api/v1/boards/",
                headers=headers,
                timeout=10
            ) as response:
                print(f"   GET —Å—Ç–∞—Ç—É—Å: {response.status}")
                
                if response.status == 500:
                    error_text = await response.text()
                    print(f"   ‚ùå –û–®–ò–ë–ö–ê 500 –≤ GET: {error_text[:200]}...")
                else:
                    resp_text = await response.text()
                    print(f"   –û—Ç–≤–µ—Ç: {resp_text[:100]}...")
                    
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ GET: {e}")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    components_status = {
        "SQLAlchemy": "‚úÖ",
        "FastAPI": "‚úÖ", 
        "Pydantic": "‚úÖ",
        "JWT": "‚úÖ"
    }
    
    for component, status in components_status.items():
        print(f"   {component}: {status}")
    
    print("\n" + "=" * 50)
    print("üèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –û–®–ò–ë–ö–ò 500:")
    print("   1. –ü—Ä–æ–±–ª–µ–º—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π (JWT –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ)")
    print("   2. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –ø–æ—Å–ª–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
    print("   3. –û—à–∏–±–∫–∏ –≤ —Å—Ö–µ–º–∞—Ö Pydantic (–≤–∞–ª–∏–¥–∞—Ü–∏—è)")
    print("   4. –ü—Ä–æ–±–ª–µ–º—ã —Å SQLAlchemy –º–æ–¥–µ–ª—è–º–∏")
    print("   5. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞: docker-compose logs web")
    print("   2. –î–æ–±–∞–≤–∏—Ç—å try-catch –≤ —Ä–æ—É—Ç–µ—Ä /boards")
    print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å JWT SECRET_KEY")
    print("   4. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ User –º–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

async def test_specific_error():
    """–ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π –æ—à–∏–±–∫–∏"""
    
    print("\nüéØ –°–ü–ï–¶–ò–§–ò–ß–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê")
    print("=" * 30)
    
    base_url = "http://localhost:8000"
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π POST –∑–∞–ø—Ä–æ—Å
    test_data = {"name": "Test Board"}
    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test"  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π JWT –¥–ª—è —Ç–µ—Å—Ç–∞
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            print("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST /api/v1/boards/ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
            
            async with session.post(
                f"{base_url}/api/v1/boards/",
                json=test_data,
                headers=headers,
                timeout=15
            ) as response:
                
                print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                print(f"üìã Headers: {dict(response.headers)}")
                
                response_text = await response.text()
                print(f"üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response_text}")
                
                if response.status == 500:
                    print("\n‚ùå –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê –û–®–ò–ë–ö–ê 500!")
                    try:
                        error_data = json.loads(response_text)
                        print(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_data}")
                        
                        if 'detail' in error_data:
                            print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {error_data['detail']}")
                        
                    except json.JSONDecodeError:
                        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ")
                        print(f"Raw response: {response_text[:500]}")
                
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /boards")
    print(f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    asyncio.run(test_boards_endpoint())
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    asyncio.run(test_specific_error())
