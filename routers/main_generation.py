"""
Main Generation Router - –æ—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π –ø–æ –¢–ó
"""
import uuid
from fastapi import APIRouter, Depends, HTTPException, Request, Header, Body
from fastapi.responses import JSONResponse
from sqlalchemy.ext.asyncio import AsyncSession
from typing import Optional
import asyncio

from models.base import get_session
from models.user import User
from utils.auth import get_current_user_optional
from schemas.generation import (
    PresentationGenerateRequest,
    PresentationGenerateResponse,
    ErrorResponse,
    GuestCreditsInfo
)
from services.guest_credits import guest_credits_service
from services.presentation_files import presentation_files_service
from services.image_microservice import image_microservice_client
from ai_services.manager import ai_manager
from services.template_service import TemplateService
from ai_services.image_service import image_service, get_image_for_slide

router = APIRouter(tags=["Main Generation"])

@router.post(
    "/generate-presentation",
    response_model=PresentationGenerateResponse,
    responses={
        403: {"model": ErrorResponse, "description": "Not enough credits"},
        500: {"model": ErrorResponse, "description": "Generation error"}
    }
)
async def generate_presentation(
    request: PresentationGenerateRequest,
    req: Request,
    session: AsyncSession = Depends(get_session),
    current_user: Optional[User] = Depends(get_current_user_optional),
    x_guest_session: Optional[str] = Header(None, alias="X-Guest-Session"),
    template_id: Optional[str] = Body(None, description="ID —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
):
    """
    üéØ –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π
    
    **–õ–æ–≥–∏–∫–∞:**
    1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –≥–æ—Å—Ç—å)
    2. –î–ª—è –≥–æ—Å—Ç—è - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Å–ø–∏—Å–∞—Ç—å –∫—Ä–µ–¥–∏—Ç
    3. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é (–±–µ–∑ —Ñ–æ—Ç–æ)
    4. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–æ–π HTML
    5. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∫–∞—Ä—Ç–∏–Ω–æ–∫
    6. –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π HTML —Å —Ä–∞–±–æ—á–∏–º–∏ URL –∫–∞—Ä—Ç–∏–Ω–æ–∫
    7. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    8. –í–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≥–æ—Å—Ç—è
    user_id = None
    guest_session_id = None
    
    if current_user:
        # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        user_id = str(current_user.id)
        user_or_guest_id = f"user_{user_id}"
    else:
        # –ì–æ—Å—Ç—å - —Ä–∞–±–æ—Ç–∞–µ–º —Å –∫—Ä–µ–¥–∏—Ç–∞–º–∏
        ip_address = req.client.host
        user_agent = req.headers.get("User-Agent", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –≥–æ—Å—Ç–µ–≤—É—é —Å–µ—Å—Å–∏—é
        guest_session_id, credits = await guest_credits_service.get_or_create_guest_session(
            x_guest_session, ip_address, user_agent, session
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
        if credits <= 0:
            return JSONResponse(
                status_code=403,
                content={"error": "Not enough credits"}
            )
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç
        credit_used = await guest_credits_service.use_credit(guest_session_id, session)
        if not credit_used:
            return JSONResponse(
                status_code=403,
                content={"error": "Not enough credits"}
            )
        
        user_or_guest_id = f"guest_{guest_session_id}"
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
        presentation_id = str(uuid.uuid4())
        
        # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é (–±–µ–∑ —Ñ–æ—Ç–æ)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π ai_manager
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI
        generation_request = {
            "topic": request.topic,
            "content": request.content or "",
            "slides_count": request.slides_count,
            "language": request.language,
            "with_images": False  # –ü–æ–∫–∞ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
        raw_presentation = await ai_manager.generate_presentation(generation_request)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–∞–π–¥—ã –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        slides = raw_presentation.get("slides") if isinstance(raw_presentation, dict) else None
        title = raw_presentation.get("title") if isinstance(raw_presentation, dict) else request.topic
        
        # --- –ù–æ–≤—ã–π –±–ª–æ–∫: –ø–æ–¥–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–ª–∞–π–¥–æ–≤ ---
        if slides:
            image_tasks = []
            for slide in slides:
                search_query = f"{slide.get('title','')} {slide.get('content','')}"
                image_tasks.append(get_image_for_slide(search_query))
            images = await asyncio.gather(*image_tasks)
            for i, slide in enumerate(slides):
                image = images[i] if i < len(images) else None
                if image:
                    slide['image'] = image.to_dict() if hasattr(image, 'to_dict') else image
        # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ ---
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —à–∞–±–ª–æ–Ω
        if template_id:
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
            builtin = TemplateService.get_builtin_template(template_id)
            template_html = None
            if builtin:
                template_html = builtin['html_content']
            else:
                template_html = await TemplateService.get_template_html(template_id, session)
            if template_html:
                slides_html = ""
                if slides:
                    for i, slide in enumerate(slides):
                        # –í—Å—Ç–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
                        img_html = ""
                        if slide.get('image') and slide['image'].get('url'):
                            img_html = f"<div class='slide-image'><img src='{slide['image']['url']}' alt='{slide['image'].get('alt','')}' /><div class='image-credit'>–§–æ—Ç–æ: {slide['image'].get('photographer','')} | Pexels</div></div>"
                        slides_html += f"<div class='slide'><h2>{slide.get('title','')}</h2><div class='content'>{slide.get('content','')}</div>{img_html}</div>"
                else:
                    slides_html = "<div class='slide'><h2>–ù–µ—Ç —Å–ª–∞–π–¥–æ–≤</h2></div>"
                raw_html = template_html.replace("{{slides}}", slides_html).replace("{{title}}", title)
            else:
                raw_html = await _create_fallback_html(request)
        else:
            if isinstance(raw_presentation, dict) and "html" in raw_presentation:
                raw_html = raw_presentation["html"]
            else:
                raw_html = await _create_fallback_html(request)
        
        # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–æ–π HTML
        await presentation_files_service.save_raw_html(
            user_or_guest_id, presentation_id, raw_html
        )
        
        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∫–∞—Ä—Ç–∏–Ω–æ–∫
        final_html = await image_microservice_client.process_html_with_images(
            raw_html, request.topic
        )
        
        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π HTML
        await presentation_files_service.save_final_html(
            user_or_guest_id, presentation_id, final_html
        )
        
        # 5. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = PresentationGenerateResponse(
            presentation_id=presentation_id,
            html=final_html
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å session_id –¥–ª—è –≥–æ—Å—Ç–µ–π
        response_json = response.model_dump()
        headers = {}
        
        if guest_session_id:
            headers["X-Guest-Session"] = guest_session_id
            remaining_credits = await guest_credits_service.get_credits(guest_session_id, session)
            headers["X-Guest-Credits"] = str(remaining_credits)
        
        if not current_user and x_guest_session:
            response_json["guest_session_id"] = x_guest_session
        
        return JSONResponse(content=response_json, headers=headers)
        
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–µ–¥–∏—Ç –≥–æ—Å—Ç—é
        if guest_session_id:
            await guest_credits_service.refund_credit(guest_session_id, session)
        
        return JSONResponse(
            status_code=500,
            content={"error": f"Generation failed: {str(e)}"}
        )

@router.get("/guest-credits", response_model=GuestCreditsInfo)
async def get_guest_credits(
    req: Request,
    session: AsyncSession = Depends(get_session),
    x_guest_session: Optional[str] = Header(None, alias="X-Guest-Session")
):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö –≥–æ—Å—Ç—è"""
    
    if not x_guest_session:
        return JSONResponse(
            status_code=400,
            content={"error": "X-Guest-Session header required"}
        )
    
    credits = await guest_credits_service.get_credits(x_guest_session, session)
    
    return GuestCreditsInfo(
        session_id=x_guest_session,
        credits=credits,
        credits_used=50 - credits
    )

async def _create_fallback_html(request: PresentationGenerateRequest) -> str:
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π HTML –≤ —Å–ª—É—á–∞–µ –æ—Ç–∫–∞–∑–∞ AI —Å–µ—Ä–≤–∏—Å–∞"""
    slides_html = ""
    
    for i in range(request.slides_count):
        slide_title = f"–°–ª–∞–π–¥ {i + 1}"
        if i == 0:
            slide_title = request.topic
        
        slides_html += f"""
        <div class="slide">
            <h2>{slide_title}</h2>
            <div class="content">
                <p>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–∞–π–¥–∞ {i + 1}</p>
                {f'<p>{request.content}</p>' if request.content and i == 1 else ''}
            </div>
        </div>
        """
    
    return f"""
    <!DOCTYPE html>
    <html lang="{request.language}">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>{request.topic}</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 0; padding: 20px; }}
            .slide {{ background: white; margin: 20px 0; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
            h2 {{ color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px; }}
            .content {{ margin-top: 20px; line-height: 1.6; }}
        </style>
    </head>
    <body>
        <h1>{request.topic}</h1>
        {slides_html}
    </body>
    </html>
    """
