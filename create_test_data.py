#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SayDeck
"""
import asyncio
import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from models.base import get_session, engine, Base
from models.user import User
from models.presentation import Presentation
from utils.auth import get_password_hash
from sqlalchemy.ext.asyncio import AsyncSession

async def create_test_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    
    async with get_session().__anext__() as session:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = User(
            email="test@example.com",
            username="testuser",
            hashed_password=get_password_hash("testpassword123"),
            role="user",
            credits=100,
            is_email_verified=True
        )
        
        session.add(test_user)
        await session.commit()
        await session.refresh(test_user)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
        test_presentations = [
            {
                "title": "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
                "content": {
                    "slides": [
                        {
                            "title": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ò–ò?",
                            "content": "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç - —ç—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –º–∞—à–∏–Ω–∞–º –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
                            "type": "title"
                        },
                        {
                            "title": "–û–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è",
                            "content": "‚Ä¢ –ú–µ–¥–∏—Ü–∏–Ω–∞\n‚Ä¢ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç\n‚Ä¢ –§–∏–Ω–∞–Ω—Å—ã\n‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
                            "type": "content"
                        },
                        {
                            "title": "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–∞–∑–≤–∏—Ç–∏—è",
                            "content": "–ò–ò –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å –≤—Å–µ –±–æ–ª–µ–µ –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –≤ –Ω–∞—à–µ–π –∂–∏–∑–Ω–∏",
                            "type": "content"
                        }
                    ]
                },
                "user_id": test_user.id
            },
            {
                "title": "–û—Å–Ω–æ–≤—ã –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                "content": {
                    "slides": [
                        {
                            "title": "HTML, CSS, JavaScript",
                            "content": "–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-—Å–∞–π—Ç–æ–≤",
                            "type": "title"
                        },
                        {
                            "title": "Frontend vs Backend",
                            "content": "Frontend - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\nBackend - —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞",
                            "type": "content"
                        }
                    ]
                },
                "user_id": test_user.id
            },
            {
                "title": "Python –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
                "content": {
                    "slides": [
                        {
                            "title": "–ü–æ—á–µ–º—É Python?",
                            "content": "–ü—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –º–Ω–æ–∂–µ—Å—Ç–≤–æ –±–∏–±–ª–∏–æ—Ç–µ–∫",
                            "type": "title"
                        },
                        {
                            "title": "–û—Å–Ω–æ–≤—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞",
                            "content": "print('Hello, World!')\nname = 'Python'\nif name == 'Python':\n    print('–≠—Ç–æ Python!')",
                            "type": "content"
                        }
                    ]
                },
                "user_id": test_user.id
            }
        ]
        
        for pres_data in test_presentations:
            presentation = Presentation(**pres_data)
            session.add(presentation)
        
        await session.commit()
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        print(f"üìß Email: test@example.com")
        print(f"üîë Password: testpassword123")
        print(f"üë§ User ID: {test_user.id}")
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π: {len(test_presentations)}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await create_test_data()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
