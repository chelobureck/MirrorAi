"""
Groq Provider - –Ω–æ–≤—ã–π –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
"""
import json
from typing import Dict, Any
from groq import Groq
from config.settings import get_settings
from .base import AIProvider, AIGenerationRequest

settings = get_settings()

class GroqProvider(AIProvider):
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä Groq - –±—ã—Å—Ç—Ä—ã–µ LLM –º–æ–¥–µ–ª–∏"""

    def __init__(self):
        self.client = None
        self._initialized = False

    def _ensure_client(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Groq –∫–ª–∏–µ–Ω—Ç–∞"""
        if not self._initialized:
            groq_key = getattr(settings, 'GROQ_API_KEY', None)
            if groq_key and groq_key != "your_groq_key" and groq_key.startswith('gsk_'):
                self.client = Groq(api_key=groq_key)
                print(f"‚úì Groq initialized with key: {groq_key[:10]}...")
            else:
                self.client = None
                print("‚ùå Groq API key not configured properly")
            self._initialized = True
        return self.client

    async def generate_presentation(self, request: AIGenerationRequest) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ Groq Llama"""
        client = self._ensure_client()
        if not client:
            print("üöÄ Using demo mode - no Groq API key configured")
            return self._generate_demo_presentation(request)

        try:
            return await self._generate_real_presentation(request, client)
        except Exception as e:
            print(f"‚ùå Groq API error: {e}")
            print("üöÄ Falling back to demo mode")
            return self._generate_demo_presentation(request)

    async def _generate_real_presentation(self, request: AIGenerationRequest, client) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π Groq API"""
        topic = request.topic or "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"
        content = request.content or ""

        prompt = f"""–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –Ω–∞ —Ç–µ–º—É "{topic}" –Ω–∞ {request.language} —è–∑—ã–∫–µ.

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {content}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤: {request.slides_count}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ markdown –±–ª–æ–∫–æ–≤
2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: —Ç–∏—Ç—É–ª—å–Ω—ã–π —Å–ª–∞–π–¥ ‚Üí –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ —Å–ª–∞–π–¥—ã ‚Üí –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
3. –ö–∞–∂–¥—ã–π —Å–ª–∞–π–¥: –∑–∞–≥–æ–ª–æ–≤–æ–∫ + —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (50-150 —Å–ª–æ–≤)
4. –ò—Å–ø–æ–ª—å–∑—É–π HTML —Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: <h2>, <p>, <strong>, <ul>, <li>

JSON —Ñ–æ—Ä–º–∞—Ç:
{{
    "title": "{topic}",
    "slides": [
        {{
            "title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π–¥–∞",
            "content": "<p>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å <strong>–∞–∫—Ü–µ–Ω—Ç–∞–º–∏</strong></p>",
            "type": "title"
        }}
    ]
}}

–ò–°–•–û–î–ù–´–ô –¢–ï–ö–°–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê: {request.text or '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞'}
"""

        try:
            response = client.chat.completions.create(
                model="llama-3.1-70b-versatile",
                messages=[
                    {
                        "role": "system",
                        "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ markdown –±–ª–æ–∫–æ–≤."
                    },
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=2000,
                top_p=1,
                stream=False
            )

            content = response.choices[0].message.content.strip()

            # –û—á–∏—â–∞–µ–º –æ—Ç markdown –±–ª–æ–∫–æ–≤
            if content.startswith("```json"):
                content = content[7:]
            if content.startswith("```"):
                content = content[3:]
            if content.endswith("```"):
                content = content[:-3]

            content = content.strip()
            result = json.loads(content)

            if not isinstance(result, dict) or 'title' not in result or 'slides' not in result:
                raise ValueError("Invalid response structure")

            print(f"‚úì Groq successfully generated presentation: {result['title']}")
            return result

        except json.JSONDecodeError as e:
            print(f"‚ùå Groq JSON parsing error: {e}")
            print(f"Raw response: {content[:200]}...")
            return self._create_fallback_presentation(request)
        except Exception as e:
            print(f"‚ùå Groq generation error: {e}")
            return self._create_fallback_presentation(request)

    def get_provider_name(self) -> str:
        return "Groq (Llama 3.1)"

    def is_available(self) -> bool:
        client = self._ensure_client()
        return client is not None

    def _create_fallback_presentation(self, request: AIGenerationRequest) -> Dict[str, Any]:
        return {
            "title": f"–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ —Ç–µ–º—É: {request.topic or request.text[:50] if request.text else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞'}...",
            "slides": [
                {
                    "title": "–í–≤–µ–¥–µ–Ω–∏–µ",
                    "content": "<p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é, —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å –ø–æ–º–æ—â—å—é <strong>Groq AI</strong></p>",
                    "type": "title"
                },
                {
                    "title": f"–û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞",
                    "content": f"<p>–ê–Ω–∞–ª–∏–∑ —Ç–µ–º—ã: <strong>{request.topic or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞'}</strong></p><p>{request.content or request.text[:200] if request.text else '–ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–º–µ.'}...</p>",
                    "type": "content"
                },
                {
                    "title": "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ",
                    "content": "<p>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ!</p><p><em>–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π SayDeck</em></p>",
                    "type": "conclusion"
                }
            ]
        }

    def _generate_demo_presentation(self, request: AIGenerationRequest) -> Dict[str, Any]:
        slides = [
            {
                "title": request.topic or "–î–µ–º–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è",
                "content": "<p>–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π <strong>SayDeck</strong> –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ</p>",
                "type": "title"
            }
        ]

        for i in range(request.slides_count - 1):
            slide_num = i + 2
            slides.append({
                "title": f"–†–∞–∑–¥–µ–ª {slide_num}",
                "content": f"<p>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–∑–¥–µ–ª–∞ <strong>{slide_num}</strong> –ø–æ —Ç–µ–º–µ '<em>{request.topic or '–î–µ–º–æ —Ç–µ–º–∞'}</em>'.</p><p>{request.content or '–ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–º–µ.'}</p>",
                "type": "content"
            })

        return {
            "title": request.topic or "–î–µ–º–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è",
            "slides": slides,
            "metadata": {
                "provider": "Groq Demo",
                "generated_at": "2025-07-06",
                "mode": "demo"
            }
        }
