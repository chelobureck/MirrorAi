import os
import ssl
import urllib.parse
from typing import Any, Dict

from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from sqlalchemy.orm import DeclarativeBase, sessionmaker

from config.settings import get_settings

# –ò—Å–ø–æ–ª—å–∑—É–µ–º DeclarativeBase –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ–¥—Ö–æ–¥ –≤ SQLAlchemy 2.0.
# –í—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥.
# class Base(DeclarativeBase):
#     pass
# –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏.
Base = declarative_base()

settings = get_settings()


def _build_database_url() -> str:
    """
    –°—Ç—Ä–æ–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:
    1) DATABASE_URL (–ø–æ–ª–Ω—ã–π DSN)
    2) POSTGRES_SERVER –∫–∞–∫ –ø–æ–ª–Ω—ã–π DSN
    3) –°–±–æ—Ä–∫–∞ –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (USER/PASSWORD/SERVER/PORT/DB)
    """
    if settings.USE_POSTGRES.lower() == "true":
        db_url_env = os.getenv("DATABASE_URL") or settings.DATABASE_URL
        if db_url_env:
            dsn = db_url_env
            if "?" in dsn:
                base, _, _ = dsn.partition("?")
                dsn = base
            return dsn

        server_val = settings.POSTGRES_SERVER or ""
        if "://" in server_val:
            dsn = server_val
            if ":password@" in dsn and settings.POSTGRES_PASSWORD:
                dsn = dsn.replace(
                    ":password@",
                    f":{urllib.parse.quote_plus(settings.POSTGRES_PASSWORD)}@"
                )
            if "?sslmode=" in dsn:
                dsn = dsn.split("?")[0]
            return dsn

        safe_password = urllib.parse.quote_plus(settings.POSTGRES_PASSWORD)
        base_url = (
            f"postgresql+asyncpg://{settings.POSTGRES_USER}:{safe_password}"
            f"@{settings.POSTGRES_SERVER}:{settings.POSTGRES_PORT}/{settings.POSTGRES_DB}"
        )
        return base_url
    else:
        return "sqlite+aiosqlite:///./saydeck.db"


database_url = _build_database_url()

if "sqlite" in database_url:
    connect_args: Dict[str, Any] = {}
    engine = create_async_engine(
        database_url,
        echo=True,
        pool_pre_ping=True
    )
else:
    is_production = (os.getenv("ENVIRONMENT") or settings.ENVIRONMENT) == "production"
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π —Ç–∏–ø –¥–ª—è connect_args, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏.
    connect_args: Dict[str, Any] = {
        "server_settings": {
            "application_name": "SayDeck",
            "timezone": "UTC"
        }
    }
    
    env_value = os.getenv("ENVIRONMENT") or settings.ENVIRONMENT
    is_aws_or_production = (
        is_production or 
        "aws" in env_value.lower() or 
        "render" in env_value.lower() or
        "production" in env_value.lower()
    )

    sslmode_hint = (os.getenv("DATABASE_URL") or "").lower()
    ssl_required_by_url = ("sslmode=require" in sslmode_hint)
    url_hostport = database_url.split("@")[1] if "@" in database_url else database_url
    host_part = url_hostport.split("/")[0]
    ssl_required_by_host = ("rds.amazonaws.com" in host_part) or ("render.com" in host_part)

    must_use_ssl = is_aws_or_production or ssl_required_by_url or ssl_required_by_host

    if must_use_ssl:
        ssl_verify = (os.getenv("POSTGRES_SSL_VERIFY") or "true").lower() == "true"
        ssl_ctx = ssl.create_default_context()
        if not ssl_verify:
            ssl_ctx.check_hostname = False
            ssl_ctx.verify_mode = ssl.CERT_NONE
            print(f"üîí SSL: insecure context (verify=FALSE) –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {env_value}")
        else:
            print(f"üîí SSL: verified context (verify=TRUE) –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {env_value}")
        connect_args["ssl"] = ssl_ctx
    else:
        connect_args["ssl"] = False
        print(f"üîì SSL –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {env_value}")
    
    engine = create_async_engine(
        database_url,
        echo=True,
        pool_pre_ping=True,
        pool_size=20,
        max_overflow=30,
        pool_recycle=3600,
        connect_args=connect_args
    )

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∑–∞–º–µ–Ω–µ–Ω–æ 'sessionmaker' –Ω–∞ 'async_sessionmaker'.
# –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ—Ä–µ–Ω—å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å—é.
async_session = async_sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)


async def get_session():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        async with async_session() as session:
            yield session
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print(f"üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {database_url.split('@')[1] if '@' in database_url else database_url}")
        print(f"üîí SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {connect_args.get('ssl', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
        
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        print(f"üîç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        if "SSL" in str(e):
            print("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ENVIRONMENT")
        raise