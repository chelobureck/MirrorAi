from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi_limiter import FastAPILimiter
import redis.asyncio as redis
from config.settings import get_settings
from models.base import Base, engine, init_db
from routers import (
    auth, 
    html_generator,
    presentations,
    boards,
    templates,
    preferences,
    public,
    enhanced_generator,
    main_generation,
    gpt_test
)
from services.template_service import TemplateService
from ai_services.image_service import image_service
import os

settings = get_settings()
app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.VERSION,
    openapi_url=f"{settings.API_V1_STR}/openapi.json"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í production –ª—É—á—à–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
    expose_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(auth.router, prefix=settings.API_V1_STR, tags=["auth"])
app.include_router(html_generator.router, prefix=settings.API_V1_STR, tags=["html-generation"])
app.include_router(presentations.router, prefix=settings.API_V1_STR, tags=["presentations"])
app.include_router(boards.router, prefix=settings.API_V1_STR, tags=["boards"])
app.include_router(templates.router, tags=["templates"])  # –£–±–∏—Ä–∞–µ–º prefix, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –≤ —Ä–æ—É—Ç–µ—Ä–µ
app.include_router(preferences.router, prefix=settings.API_V1_STR, tags=["preferences"])
app.include_router(public.router, prefix=settings.API_V1_STR, tags=["public"])
app.include_router(enhanced_generator.router, tags=["enhanced-generation"])
app.include_router(main_generation.router, prefix=settings.API_V1_STR, tags=["main-generation"])
app.include_router(gpt_test.router, prefix=settings.API_V1_STR, tags=["gpt-testing"])


@app.on_event("startup")
async def startup():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis –¥–ª—è rate limiting
        # –í Docker –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è Redis
        redis_url = os.getenv("REDIS_URL", "redis://redis:6379")
        print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis: {redis_url}")
        
        try:
            redis_client = redis.from_url(
                redis_url,
                encoding="utf-8",
                decode_responses=True
            )
            await FastAPILimiter.init(redis_client)
            print("‚úÖ Redis —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        except Exception as re:
            print(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {re}")
            print("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
        try:
            from models.base import get_session
            gen = get_session()
            session = await anext(gen)
            try:
                # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –±–µ–∑ user_id –∏–ª–∏ —Å NULL
                await TemplateService.create_builtin_templates_in_db(session, user_id=None)
                print("‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–∑–¥–∞–Ω—ã!")
            finally:
                await session.close()
        except Exception as e:
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã: {e}")
            print("–≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

        await image_service._ensure_session()
        print("‚úÖ Image service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        # –í production –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–µ—Ç—Ä–∏–∫–∏
        raise

@app.on_event("shutdown")
async def shutdown_event():
    try:
        await image_service.close_session()
        print("‚úÖ Image service –∑–∞–∫—Ä—ã—Ç!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ image service: {e}")

@app.get("/")
async def root():
    return {"message": "Welcome to SayDeck API"}

@app.get("/health")
async def health():
    """–ü—Ä–æ—Å—Ç–æ–π healthcheck –¥–ª—è AWS ECS"""
    return {"status": "healthy"}

@app.get("/api/v1/health")
async def api_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return {
        "status": "healthy",
        "message": "SayDeck API v1 - AI –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π —à–∞–±–ª–æ–Ω–æ–≤",
        "endpoints": {
            "generate_html": "/api/v1/generate/ (POST)",
            "generate_json": "/api/v1/generate/json (POST)",
            "enhanced_generate": "/api/v1/enhanced/generate (POST)",
            "search_images": "/api/v1/enhanced/search-images (GET)",
            "presentations": "/api/v1/presentations",
            "public": "/api/v1/public",
            "templates": "/api/v1/templates",
            "export": "/api/v1/export"
        },
        "features": [
            "–°–æ–∑–¥–∞–Ω–∏–µ HTML –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ (Groq/OpenAI)",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∏ –≤—Å—Ç–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (Pexels API)",
            "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å CSS –∞–Ω–∏–º–∞—Ü–∏—è–º–∏", 
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
            "–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–ª–∞–π–¥–∞–º",
            "–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            "–°–∏—Å—Ç–µ–º–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π"
        ],
        "template_system": {
            "save_template": "/api/v1/templates/{presentation_id}/save (POST)",
            "delete_template": "/api/v1/templates/{template_id} (DELETE)",
            "get_template": "/api/v1/templates/{template_id} (GET)",
            "template_viewer": "/api/v1/templates/{template_id}/viewer (GET)",
            "list_templates": "/api/v1/templates (GET)"
        },
        "new_services": [
            "Enhanced Generator - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏",
            "Image Service - –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Pexels API",
            "Smart Content Analysis - –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            "Template Service - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π"
        ]
    }